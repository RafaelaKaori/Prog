
TP1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000160  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000948  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000627  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000227  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021b  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000047  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000d4  000000d4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text         0000000c  000000c8  000000c8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000048  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text:

000000c8 <soma_dois>:
 
 .global soma_dois
	
	soma_dois:

		ADD R24, R22
  c8:	86 0f       	add	r24, r22
		CLR R25
  ca:	99 27       	eor	r25, r25
		ret
  cc:	08 95       	ret

000000ce <sub_dois>:
		
 .global sub_dois

	sub_dois:
		
		SUB R24, R22
  ce:	86 1b       	sub	r24, r22
		CLR R25
  d0:	99 27       	eor	r25, r25
  d2:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
extern char soma_dois(char, char);
extern char sub_dois(char, char);


main()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	29 97       	sbiw	r28, 0x09	; 9
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	
	volatile unsigned char num7, num8, num9;

	while(1)
    { 
        num1 = 5;
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	89 83       	std	Y+1, r24	; 0x01
		num2 = 5;
  98:	8a 83       	std	Y+2, r24	; 0x02
		num3= 3;
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	8b 83       	std	Y+3, r24	; 0x03
		num4 = 3;
  9e:	8c 83       	std	Y+4, r24	; 0x04
		num7 = num5;
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	8f 83       	std	Y+7, r24	; 0x07
		num8 = num6;
  a4:	8e 81       	ldd	r24, Y+6	; 0x06
  a6:	88 87       	std	Y+8, r24	; 0x08
		num5 = soma_dois(num1, num2);
  a8:	6a 81       	ldd	r22, Y+2	; 0x02
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	0e 94 64 00 	call	0xc8	; 0xc8 <soma_dois>
  b0:	8d 83       	std	Y+5, r24	; 0x05
		num6 = soma_dois(num3, num4);
  b2:	6c 81       	ldd	r22, Y+4	; 0x04
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	0e 94 64 00 	call	0xc8	; 0xc8 <soma_dois>
  ba:	8e 83       	std	Y+6, r24	; 0x06
		num9 = sub_dois(num7, num8);
  bc:	68 85       	ldd	r22, Y+8	; 0x08
  be:	8f 81       	ldd	r24, Y+7	; 0x07
  c0:	0e 94 67 00 	call	0xce	; 0xce <sub_dois>
  c4:	89 87       	std	Y+9, r24	; 0x09
  c6:	e6 cf       	rjmp	.-52     	; 0x94 <main+0x14>
